const express = require('express');
const { searchFacebookGroups, searchMultipleQueries } = require('./group-finder');
const fs = require('fs');
const path = require('path');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express app
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(express.json({ charset: 'utf-8' }));
app.use(express.urlencoded({ extended: true, charset: 'utf-8' }));

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
app.use((req, res, next) => {
  res.charset = 'utf-8';
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});

// Request logging (start/end, duration, status)
app.use((req, res, next) => {
  const start = Date.now();
  const ip = (req.headers['x-forwarded-for'] || req.socket.remoteAddress || '').toString();
  const ua = (req.headers['user-agent'] || '').toString();
  console.log(`‚û°Ô∏è  ${req.method} ${req.originalUrl} | ip=${ip} | ua=${ua}`);
  res.on('finish', () => {
    const ms = Date.now() - start;
    console.log(`‚¨ÖÔ∏è  ${req.method} ${req.originalUrl} | status=${res.statusCode} | ${ms}ms`);
  });
  next();
});

// ‚úÖ Serve static files so you can GET /app/groups.json
app.use("/app", express.static(__dirname + "/"));

// ‚úÖ Simple test endpoint (keeps existing root docs unchanged)
app.get('/app-test', (req, res) => {
  res.send('üöÄ JSON static server enabled. Try GET /app/groups.json');
});

// API Routes
app.get('/', (req, res) => {
  res.json({
    message: 'Facebook Groups Scraper API',
    version: '1.0.0',
    endpoints: {
      'GET /search': 'Search Facebook groups by query parameter',
      'GET /search?q=<query>': 'Example: /search?q=‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
      'GET /search-multiple': 'Search with multiple queries',
      'GET /search-multiple?queries=<q1>,<q2>': 'Example: /search-multiple?queries=‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£,‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°'
    },
    usage: {
      method: 'GET',
      url: '/search',
      parameters: {
        q: 'Search query (required)'
      },
      example: 'http://localhost:3001/search?q=<query>'
    }
  });
});

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÇ‡∏î‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å ENV ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÄ‡∏ä‡πà‡∏ô‡πÉ‡∏ô Docker)
const getOutputPath = () => {
  const envPath = process.env.GROUPS_OUTPUT_PATH;
  if (envPath && typeof envPath === 'string' && envPath.trim().length > 0) {
    return envPath;
  }
  return path.resolve('groups.json');
};

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô [] ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
const initializeOutputFile = () => {
  try {
    const outputPath = getOutputPath();
    const outDir = path.dirname(outputPath);
    try { fs.mkdirSync(outDir, { recursive: true }); } catch (_) {}
    fs.writeFileSync(outputPath, '[]', 'utf8');
    console.log(`üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå -> ${outputPath} ‡πÄ‡∏õ‡πá‡∏ô []`);
  } catch (e) {
    console.error('‚ö†Ô∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', e.message);
  }
};

app.get('/search', async (req, res) => {
  try {
    const { q, maxGroups = 50 } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameter
    if (!q) {
      return res.status(400).json({
        success: false,
        error: 'Missing query parameter "q"',
        example: '/search?q=‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå'
      });
    }

    console.log(`üîç API Request: Searching for "${q}" (max: ${maxGroups})`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡∏à‡∏≤‡∏Å group-finder.js
    const t0 = Date.now();
    const groups = await searchFacebookGroups(q, parseInt(maxGroups));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö response
    const payload = {
      success: true,
      query: q,
      total_groups: groups.length,
      groups: groups
    };
    
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ payload ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    try {
      const outputPath = getOutputPath();
      const outDir = path.dirname(outputPath);
      try { fs.mkdirSync(outDir, { recursive: true }); } catch (_) {}
      fs.writeFileSync(outputPath, JSON.stringify(payload, null, 2), 'utf8');
      console.log(`üíæ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (overwrite) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ${outputPath}`);
      // Log details summary
      const ms = Date.now() - t0;
      console.log(`üìä Summary | q="${q}" | total=${payload.total_groups} | wrote=${outputPath} | ${ms}ms`);
      if (Array.isArray(groups) && groups.length) {
        console.log('üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å:');
        console.table(groups.slice(0, 10));
      }
    } catch (e) {
      console.error('‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå groups.json ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', e.message);
    }
    
    res.json(payload);

  } catch (error) {
    console.error('‚ùå API Error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error.message
    });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥
app.get('/search-multiple', async (req, res) => {
  try {
    const { queries, maxGroupsPerQuery = 15 } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameter
    if (!queries) {
      return res.status(400).json({
        success: false,
        error: 'Missing query parameter "queries"',
        example: '/search-multiple?queries=‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå,beer,‡∏Ñ‡∏£‡∏≤‡∏ü‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå'
      });
    }

    const queryList = queries.split(',').map(q => q.trim());
    console.log(`üîç API Request: Searching with multiple queries: ${queryList.join(', ')}`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡∏à‡∏≤‡∏Å group-finder.js
    const t0 = Date.now();
    const groups = await searchMultipleQueries(queryList, parseInt(maxGroupsPerQuery));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö response
    const payload = {
      success: true,
      queries: queryList,
      total_groups: groups.length,
      groups: groups
    };

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ payload ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    try {
      const outputPath = getOutputPath();
      const outDir = path.dirname(outputPath);
      try { fs.mkdirSync(outDir, { recursive: true }); } catch (_) {}
      fs.writeFileSync(outputPath, JSON.stringify(payload, null, 2), 'utf8');
      console.log(`üíæ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (overwrite) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ${outputPath}`);
      const ms = Date.now() - t0;
      console.log(`üìä Summary | queries=[${queryList.join(', ')}] | total=${payload.total_groups} | wrote=${outputPath} | ${ms}ms`);
      if (Array.isArray(groups) && groups.length) {
        console.log('üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å:');
        console.table(groups.slice(0, 10));
      }
    } catch (e) {
      console.error('‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå groups.json ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', e.message);
    }
    
    res.json(payload);

  } catch (error) {
    console.error('‚ùå API Error:', error.message);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error.message
    });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('‚ùå Unhandled error:', err);
  res.status(500).json({
    success: false,
    error: 'Internal server error'
  });
});

// Start server with error handling
// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠
initializeOutputFile();

const server = app.listen(PORT, () => {
  console.log(`üöÄ Facebook Groups Scraper API is running on port ${PORT}`);
  console.log(`üì° Try: http://localhost:${PORT}/search?q=<query>`);
  console.log(`üìñ Documentation: http://localhost:${PORT}/`);
});

server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log(`‚ùå Port ${PORT} is already in use. Trying port ${PORT + 1}...`);
    const newPort = PORT + 1;
    const newServer = app.listen(newPort, () => {
      console.log(`üöÄ Facebook Groups Scraper API is running on port ${newPort}`);
      console.log(`üì° Try: http://localhost:${newPort}/search?q=<query>`);
      console.log(`üìñ Documentation: http://localhost:${newPort}/`);
    });
  } else {
    console.error('‚ùå Server error:', err);
  }
});

module.exports = app;
